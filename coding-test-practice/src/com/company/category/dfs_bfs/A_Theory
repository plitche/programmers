그래프 탐색 알고리즘: DFS/BFS
    * 탐색(Search)이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정
    * 대표적인 그래프 탐색 알고리즘

    * 스택 자료 구조
        - 먼저 들어온 데이터가 나중에 나가는 형식(선입후출)의 자료구조
        - 입구와 출구가 동일한 형태로 스택을 시각화(박스 쌓기)
        - 동작 예시
            : 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제() => 5231
            : Stack<Integer> s = new Stack<>(); => push(), pop(), peek()

    * 큐 자료구조
        - 먼저 들어온 데이터가 먼저 나가는 형식(선입선출)의 자료구조
        - 큐는 입구와 출구가 모두 뚫려 있는 터널과 같은 형태
        - 동작 예시
            : 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제() => 3714
            : Queue<Integer> q = new LinkedList<>(); => offer(), poll()

    * 재귀 함수(Recursive Function)란 자기 자신을 다시 호출하는 함수 (DFS)
        - 종료 조건을 제대로 명시해야한다.
        - 팩토리얼
        - 최대공약수 계산(유클리드 호제법)

    * DFS(Depth-First Search)
        - 깊이 우선 탐색이라고도 부르며 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
        - DFS는 스택 자료구조(혹은 재귀함수)를 이용한다.
            1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 합니다.
            2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문처리합니다. 방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 꺼냅니다.
            3. 더이상 2번의 과정을 수행할 수 없을 때까지 반복합니다.

    * BFS(Breadth-First Search)
        - BFS는 너비 우선 탐색이라고도 부르며, 그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘
        - BFS는 큐 자료구조를 이용한다.
            1. 탐색 시작 노드를 큐에 삽입하고 방문처리한다.
            2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리 한다.
            3. 더이상 2번의 과정을 수행할 수 없을 때까지 반복합니다.

